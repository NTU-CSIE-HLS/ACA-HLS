#include "rns.h"
#include "mod.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <iostream>
using namespace std;
extern "C" {

#if PRIME_SETTING == 0
//default prime list

////////////////////////// put the below in mod.cpp
  static ap_int<XY_WIDTH+1> NEGATIVE_SHIFT = ap_int<XY_WIDTH+1>("9223372036854775808", 10);

  static ap_int<XY_WIDTH> NEGATIVE_SHIFT_MOD[N_PRIME] = \
  { 536707068, 257424990, 2007612687, 355662431, 56883651, 1103460052, 366572968, 0, 1886843322, 1658040001, 1180134487, 1055025065, 671998760, 844161746, 753065355, 2118343792 };


  static ap_uint<P_WIDTH> MODULAR_TABLE[N_PRIME][MODULAR_TABLE_SIZE] = { \

    {0,2147401727,2147237885,2147074043,2146910201,2146746359,2146582517,2146418675,2146254833,2146090991,2145927149,2145763307,2145599465,2145435623,2145271781,2145107939,2144944097,2144780255,2144616413,2144452571,2144288729,2144124887,2143961045,2143797203,2143633361,2143469519,2143305677,2143141835,2142977993,2142814151,2142650309,2142486467,2142322625,2142158783,2141994941,2141831099,2141667257,2141503415,2141339573,2141175731,2141011889,2140848047,2140684205,2140520363,2140356521,2140192679,2140028837,2139864995,2139701153,2139537311,2139373469,2139209627,2139045785,2138881943,2138718101,2138554259,2138390417,2138226575,2138062733,2137898891,2137735049,2137571207,2137407365,2137243523} \

    , {0,2146811903,2145468413,2144124923,2142781433,2141437943,2140094453,2138750963,2137407473,2136063983,2134720493,2133377003,2132033513,2130690023,2129346533,2128003043,2126659553,2125316063,2123972573,2122629083,2121285593,2119942103,2118598613,2117255123,2115911633,2114568143,2113224653,2111881163,2110537673,2109194183,2107850693,2106507203,2105163713,2103820223,2102476733,2101133243,2099789753,2098446263,2097102773,2095759283,2094415793,2093072303,2091728813,2090385323,2089041833,2087698343,2086354853,2085011363,2083667873,2082324383,2080980893,2079637403,2078293913,2076950423,2075606933,2074263443,2072919953,2071576463,2070232973,2068889483,2067545993,2066202503,2064859013,2063515523} \

    , {0,2146582527,2144780285,2142978043,2141175801,2139373559,2137571317,2135769075,2133966833,2132164591,2130362349,2128560107,2126757865,2124955623,2123153381,2121351139,2119548897,2117746655,2115944413,2114142171,2112339929,2110537687,2108735445,2106933203,2105130961,2103328719,2101526477,2099724235,2097921993,2096119751,2094317509,2092515267,2090713025,2088910783,2087108541,2085306299,2083504057,2081701815,2079899573,2078097331,2076295089,2074492847,2072690605,2070888363,2069086121,2067283879,2065481637,2063679395,2061877153,2060074911,2058272669,2056470427,2054668185,2052865943,2051063701,2049261459,2047459217,2045656975,2043854733,2042052491,2040250249,2038448007,2036645765,2034843523} \

    , {0,2146238463,2143748093,2141257723,2138767353,2136276983,2133786613,2131296243,2128805873,2126315503,2123825133,2121334763,2118844393,2116354023,2113863653,2111373283,2108882913,2106392543,2103902173,2101411803,2098921433,2096431063,2093940693,2091450323,2088959953,2086469583,2083979213,2081488843,2078998473,2076508103,2074017733,2071527363,2069036993,2066546623,2064056253,2061565883,2059075513,2056585143,2054094773,2051604403,2049114033,2046623663,2044133293,2041642923,2039152553,2036662183,2034171813,2031681443,2029191073,2026700703,2024210333,2021719963,2019229593,2016739223,2014248853,2011758483,2009268113,2006777743,2004287373,2001797003,1999306633,1996816263,1994325893,1991835523} \

    , {0,2146172927,2143551485,2140930043,2138308601,2135687159,2133065717,2130444275,2127822833,2125201391,2122579949,2119958507,2117337065,2114715623,2112094181,2109472739,2106851297,2104229855,2101608413,2098986971,2096365529,2093744087,2091122645,2088501203,2085879761,2083258319,2080636877,2078015435,2075393993,2072772551,2070151109,2067529667,2064908225,2062286783,2059665341,2057043899,2054422457,2051801015,2049179573,2046558131,2043936689,2041315247,2038693805,2036072363,2033450921,2030829479,2028208037,2025586595,2022965153,2020343711,2017722269,2015100827,2012479385,2009857943,2007236501,2004615059,2001993617,1999372175,1996750733,1994129291,1991507849,1988886407,1986264965,1983643523} \

    , {0,2145894399,2142715901,2139537403,2136358905,2133180407,2130001909,2126823411,2123644913,2120466415,2117287917,2114109419,2110930921,2107752423,2104573925,2101395427,2098216929,2095038431,2091859933,2088681435,2085502937,2082324439,2079145941,2075967443,2072788945,2069610447,2066431949,2063253451,2060074953,2056896455,2053717957,2050539459,2047360961,2044182463,2041003965,2037825467,2034646969,2031468471,2028289973,2025111475,2021932977,2018754479,2015575981,2012397483,2009218985,2006040487,2002861989,1999683491,1996504993,1993326495,1990147997,1986969499,1983791001,1980612503,1977434005,1974255507,1971077009,1967898511,1964720013,1961541515,1958363017,1955184519,1952006021,1948827523} \

    , {0,2145796095,2142420989,2139045883,2135670777,2132295671,2128920565,2125545459,2122170353,2118795247,2115420141,2112045035,2108669929,2105294823,2101919717,2098544611,2095169505,2091794399,2088419293,2085044187,2081669081,2078293975,2074918869,2071543763,2068168657,2064793551,2061418445,2058043339,2054668233,2051293127,2047918021,2044542915,2041167809,2037792703,2034417597,2031042491,2027667385,2024292279,2020917173,2017542067,2014166961,2010791855,2007416749,2004041643,2000666537,1997291431,1993916325,1990541219,1987166113,1983791007,1980415901,1977040795,1973665689,1970290583,1966915477,1963540371,1960165265,1956790159,1953415053,1950039947,1946664841,1943289735,1939914629,1936539523} \
    , {0}
    , {0,2145501183,2141536253,2137571323,2133606393,2129641463,2125676533,2121711603,2117746673,2113781743,2109816813,2105851883,2101886953,2097922023,2093957093,2089992163,2086027233,2082062303,2078097373,2074132443,2070167513,2066202583,2062237653,2058272723,2054307793,2050342863,2046377933,2042413003,2038448073,2034483143,2030518213,2026553283,2022588353,2018623423,2014658493,2010693563,2006728633,2002763703,1998798773,1994833843,1990868913,1986903983,1982939053,1978974123,1975009193,1971044263,1967079333,1963114403,1959149473,1955184543,1951219613,1947254683,1943289753,1939324823,1935359893,1931394963,1927430033,1923465103,1919500173,1915535243,1911570313,1907605383,1903640453,1899675523} \

    , {0,2145304575,2140946429,2136588283,2132230137,2127871991,2123513845,2119155699,2114797553,2110439407,2106081261,2101723115,2097364969,2093006823,2088648677,2084290531,2079932385,2075574239,2071216093,2066857947,2062499801,2058141655,2053783509,2049425363,2045067217,2040709071,2036350925,2031992779,2027634633,2023276487,2018918341,2014560195,2010202049,2005843903,2001485757,1997127611,1992769465,1988411319,1984053173,1979695027,1975336881,1970978735,1966620589,1962262443,1957904297,1953546151,1949188005,1944829859,1940471713,1936113567,1931755421,1927397275,1923039129,1918680983,1914322837,1909964691,1905606545,1901248399,1896890253,1892532107,1888173961,1883815815,1879457669,1875099523} \

    , {0,2145157119,2140504061,2135851003,2131197945,2126544887,2121891829,2117238771,2112585713,2107932655,2103279597,2098626539,2093973481,2089320423,2084667365,2080014307,2075361249,2070708191,2066055133,2061402075,2056749017,2052095959,2047442901,2042789843,2038136785,2033483727,2028830669,2024177611,2019524553,2014871495,2010218437,2005565379,2000912321,1996259263,1991606205,1986953147,1982300089,1977647031,1972993973,1968340915,1963687857,1959034799,1954381741,1949728683,1945075625,1940422567,1935769509,1931116451,1926463393,1921810335,1917157277,1912504219,1907851161,1903198103,1898545045,1893891987,1889238929,1884585871,1879932813,1875279755,1870626697,1865973639,1861320581,1856667523} \

    , {0,2144894975,2139717629,2134540283,2129362937,2124185591,2119008245,2113830899,2108653553,2103476207,2098298861,2093121515,2087944169,2082766823,2077589477,2072412131,2067234785,2062057439,2056880093,2051702747,2046525401,2041348055,2036170709,2030993363,2025816017,2020638671,2015461325,2010283979,2005106633,1999929287,1994751941,1989574595,1984397249,1979219903,1974042557,1968865211,1963687865,1958510519,1953333173,1948155827,1942978481,1937801135,1932623789,1927446443,1922269097,1917091751,1911914405,1906737059,1901559713,1896382367,1891205021,1886027675,1880850329,1875672983,1870495637,1865318291,1860140945,1854963599,1849786253,1844608907,1839431561,1834254215,1829076869,1823899523} \

    , {0,2144665599,2139029501,2133393403,2127757305,2122121207,2116485109,2110849011,2105212913,2099576815,2093940717,2088304619,2082668521,2077032423,2071396325,2065760227,2060124129,2054488031,2048851933,2043215835,2037579737,2031943639,2026307541,2020671443,2015035345,2009399247,2003763149,1998127051,1992490953,1986854855,1981218757,1975582659,1969946561,1964310463,1958674365,1953038267,1947402169,1941766071,1936129973,1930493875,1924857777,1919221679,1913585581,1907949483,1902313385,1896677287,1891041189,1885405091,1879768993,1874132895,1868496797,1862860699,1857224601,1851588503,1845952405,1840316307,1834680209,1829044111,1823408013,1817771915,1812135817,1806499719,1800863621,1795227523} \

    , {0,2144649215,2138980349,2133311483,2127642617,2121973751,2116304885,2110636019,2104967153,2099298287,2093629421,2087960555,2082291689,2076622823,2070953957,2065285091,2059616225,2053947359,2048278493,2042609627,2036940761,2031271895,2025603029,2019934163,2014265297,2008596431,2002927565,1997258699,1991589833,1985920967,1980252101,1974583235,1968914369,1963245503,1957576637,1951907771,1946238905,1940570039,1934901173,1929232307,1923563441,1917894575,1912225709,1906556843,1900887977,1895219111,1889550245,1883881379,1878212513,1872543647,1866874781,1861205915,1855537049,1849868183,1844199317,1838530451,1832861585,1827192719,1821523853,1815854987,1810186121,1804517255,1798848389,1793179523} \

    , {0,2144403455,2138243069,2132082683,2125922297,2119761911,2113601525,2107441139,2101280753,2095120367,2088959981,2082799595,2076639209,2070478823,2064318437,2058158051,2051997665,2045837279,2039676893,2033516507,2027356121,2021195735,2015035349,2008874963,2002714577,1996554191,1990393805,1984233419,1978073033,1971912647,1965752261,1959591875,1953431489,1947271103,1941110717,1934950331,1928789945,1922629559,1916469173,1910308787,1904148401,1897988015,1891827629,1885667243,1879506857,1873346471,1867186085,1861025699,1854865313,1848704927,1842544541,1836384155,1830223769,1824063383,1817902997,1811742611,1805582225,1799421839,1793261453,1787101067,1780940681,1774780295,1768619909,1762459523} \

    , {0,2144354303,2138095613,2131836923,2125578233,2119319543,2113060853,2106802163,2100543473,2094284783,2088026093,2081767403,2075508713,2069250023,2062991333,2056732643,2050473953,2044215263,2037956573,2031697883,2025439193,2019180503,2012921813,2006663123,2000404433,1994145743,1987887053,1981628363,1975369673,1969110983,1962852293,1956593603,1950334913,1944076223,1937817533,1931558843,1925300153,1919041463,1912782773,1906524083,1900265393,1894006703,1887748013,1881489323,1875230633,1868971943,1862713253,1856454563,1850195873,1843937183,1837678493,1831419803,1825161113,1818902423,1812643733,1806385043,1800126353,1793867663,1787608973,1781350283,1775091593,1768832903,1762574213,1756315523} \

  };


#endif //PRIME_SETTING


#if FUNCTION_SIGNED_OR_NOT == 1
//signed version
  ap_int<P_WIDTH> modular_multiplication(ap_int<P_WIDTH> x, ap_int<P_WIDTH> y, ap_uint<P_WIDTH> p, unsigned int idx_p){
#pragma HLS PIPELINE
//#pragma HLS ARRAY_PARTITION variable=MODULAR_TABLE dim=0
    ap_int<XY_WIDTH> xy = x * y;
    return reduction(xy, p, idx_p);
  }

#elif FUNCTION_SIGNED_OR_NOT == 0
//unsigned version
  ap_uint<P_WIDTH> modular_multiplication(ap_uint<P_WIDTH> x, ap_uint<P_WIDTH> y, ap_uint<P_WIDTH> p, unsigned int idx_p){
#pragma HLS PIPELINE
//#pragma HLS ARRAY_PARTITION variable=MODULAR_TABLE dim=0
    ap_uint<XY_WIDTH> xy = x * y;
    return reduction_unsigned(xy, p, idx_p);
  }
#endif //FUNCTION_SIGNED_OR_NOT


//signed version
  inline ap_int<P_WIDTH> reduction(ap_int<XY_WIDTH> xy, ap_uint<P_WIDTH> p, unsigned int idx_p){
#pragma HLS PIPELINE
//#pragma HLS ARRAY_PARTITION variable=MODULAR_TABLE dim=0
  ap_int<XY_WIDTH+1> xy_shift_signed65 = ap_int<XY_WIDTH+1>(xy) + NEGATIVE_SHIFT; //now shifted to 0 ~ 2^64 - 1 , 65 bits signed
  ap_uint<P_WIDTH> residue_unsigned32 = reduction_unsigned( ap_uint<XY_WIDTH>(xy_shift_signed65), p, idx_p );
  ap_int<XY_WIDTH> residue_signed64 = ap_int<XY_WIDTH>(residue_unsigned32) - NEGATIVE_SHIFT_MOD[idx_p]; //now shifted back to -(p-1) ~ (p-1), 33 bits signed
//#include <iostream>
  //cout << xy << " :xy" << endl;
  //cout << xy_shift_signed65 << " :xy_shift_signed65" << endl;
  //cout << residue_unsigned32 << " :residue_unsigned32" << endl;
  //cout << residue_signed64 << " :residue_signed64" << endl;

  if (idx_p == 7) return 0;

#if CENTER_SHIFT == 0
  if(residue_signed64 < 0)
    residue_signed64 += p;
#elif CENTER_SHIFT == 1
  if(residue_signed64 > p/2)
    residue_signed64 = residue_signed64 - p;
  if(residue_signed64 < -p/2)
    residue_signed64 = residue_signed64 + p;
#endif //CENTER_SHIFT

  return ap_int<P_WIDTH>(residue_signed64);
}

//unsigned version
inline ap_uint<P_WIDTH> reduction_unsigned(ap_uint<XY_WIDTH> xy, ap_uint<P_WIDTH> p, unsigned int idx_p){
#pragma HLS PIPELINE
#pragma HLS RESOURCE variable=MODULAR_TABLE core=ROM_nP_LUTRAM

  ap_uint<WINDOW_WIDTH> window;
  int base;
  for_top:for(int top=XY_WIDTH-1;top>=MODULAR_TABLE_POWER;top-=(WINDOW_WIDTH-1)){// bits above top are defined to be all zeros.
//#pragma HLS UNROLL factor=20
    base = top - (WINDOW_WIDTH-1);
    if( base < MODULAR_TABLE_POWER )
      base = MODULAR_TABLE_POWER;

    window = xy(top, base);
    xy(top, base) = 0;
    xy(base, base-MODULAR_TABLE_POWER) = xy(base, base-MODULAR_TABLE_POWER) + MODULAR_TABLE[idx_p][ window ];
  }

  for(int i=0;i<2;i++){
//#pragma HLS UNROLL //saves 2 cycles
    if(xy >= p)
      xy -= p;
  }

  return xy(P_WIDTH-1, 0);
}





void K_mulWise(ap_int<PRIME_BIT> *poly1, ap_int<PRIME_BIT> *poly2, ap_int<PRIME_BIT> *out, int inv) {
    #pragma HLS INTERFACE m_axi port=poly1 offset=slave
    #pragma HLS INTERFACE m_axi port=poly2 offset=slave
    #pragma HLS INTERFACE m_axi port=out offset=slave
    #pragma HLS INTERFACE s_axilite port = poly1 bundle = control
    #pragma HLS INTERFACE s_axilite port = poly2 bundle = control
    #pragma HLS INTERFACE s_axilite port = out bundle = control
    #pragma HLS INTERFACE s_axilite port = inv bundle = control
    #pragma HLS INTERFACE s_axilite port = return bundle = control

  for (ap_uint<LOG_RNS+LOG_N+1> i = 0; i < RNS_NUM*N; i++) {
      #pragma HLS PIPELINE
    ap_int<LOG_RNS+1> idx = (i>>LOG_N) + RNS_NUM;
    ap_int<LOG_RNS+1> idx2 = (i>>LOG_N);
    ap_int<LOG_RNS+1> idx3 = (inv==1) ? idx : idx2;
    out[i] = modular_multiplication(poly1[i], poly2[i], MOD[idx3], idx3);
  }

  return;
}
}
